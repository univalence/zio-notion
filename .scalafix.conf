# Inspired by https://github.com/scalaz/scalazzi/blob/master/scalafix.conf

rules = [
  Disable
  ExplicitResultTypes
  LeakingImplicitClassVal
  MissingFinal
  NoAutoTupling
  NoValInForComprehension
  ProcedureSyntax
  RemoveUnused
]

Disable.symbols = [
  {
    regex = "^\\Qscala/collection/mutable\\E.*$"
    message = "Java collections have better performance, which is what I assume you were trying to do"
  }
  {
    regex = "^\\Qscala/collection/parallel\\E.*$"
    message = "parallel collections are low performance and block the thread, prefer scalaz.ApplyN"
  }
  {
    regex = "^\\Qscala/math/Big\\E.*$"
    message = "scala arbitrary precision numbers are broken: https://github.com/scala/bug/issues/9670"
  }
  {
    regex = {
      includes = [
        "^\\Qjava/io\\E.*$"
        "^\\Qscala/io/Source\\E.*$"
      ]
    }
    message = "legacy blocking API, prefer java.nio"
  }
  {
    regex = "^\\Qjava/net/URL#\\E.*$"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    symbol = "scala/Enumeration"
    message = "prefer a sealed abstract class"
  }

  {
    regex = {
      includes = [
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
        "^\\Qscala/util/Try#get().\\E$"
        "^\\Qscala/Option#get().\\E$"
        "^\\Qscala/collection/IterableLike#head().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.ifSynthetic = [
   "java/io/Serializable"

   # local type inference + covariant types fires this
   # "scala/Nothing"

   # when upstream broke noImplicitConversion and we don't agree that their
   # implicits are worth the mental burden.
   "scala/Option.option2Iterable"
   "scala/Predef.any2stringadd"

  # I don't understand why these are synthetic
  # https://github.com/scalacenter/scalafix/issues/703
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = true
  noDefaultArgs = true
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}

ExplicitResultTypes {
  unsafeShortenNames = true

  fatalWarnings = true

  # these apply to non-implicits
  memberKind = [Def, Val]
  memberVisibility = [Public, Protected]

  # turn to the max...
  skipSimpleDefinitions = false
  skipLocalImplicits = false
}