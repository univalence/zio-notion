"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[698],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,b=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return a?n.createElement(b,i(i({ref:t},u),{},{components:a})):n.createElement(b,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8541:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={slug:"/database",sidebar_position:2},s="Database",p={unversionedId:"database",id:"database",title:"Database",description:"Overview",source:"@site/../docs/database.md",sourceDirName:".",slug:"/database",permalink:"/zio-notion/database",draft:!1,editUrl:"https://github.com/univalence/zio-notion/edit/master/docs/../docs/database.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/database",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/zio-notion/"},next:{title:"Page",permalink:"/zio-notion/page"}},u={},d=[{value:"Overview",id:"overview",level:2},{value:"Retrieve a database",id:"retrieve-a-database",level:2},{value:"Query a database",id:"query-a-database",level:2},{value:"Column",id:"column",level:3},{value:"Sorts",id:"sorts",level:3},{value:"Filters",id:"filters",level:3},{value:"Update a database",id:"update-a-database",level:2}],c={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"database"},"Database"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"You will deal with ",(0,o.kt)("inlineCode",{parentName:"p"},"Database")," when handling databases."),(0,o.kt)("h2",{id:"retrieve-a-database"},"Retrieve a database"),(0,o.kt)("p",null,"The easiest way to retrieve a database is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val database: ZIO[Notion, NotionError, Database] = Notion.retrieveDatabase("database-id")\n')),(0,o.kt)("p",null,"No exhaustively, the database will contain its title, its column definitions and when it is created."),(0,o.kt)("p",null,"For more information, you can check the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.notion.com/reference/retrieve-a-database"},"Notion documentation"),"."),(0,o.kt)("h2",{id:"query-a-database"},"Query a database"),(0,o.kt)("p",null,"You will need to query the database if you want to retrieve the pages that compose the database."),(0,o.kt)("p",null,"You can query the whole database, but you generally want to retrieve a subset of the database."),(0,o.kt)("p",null,"You can select what kind of information you want specifying a Query object containing information about how you want\nto sort the result (based on certain columns) or what do you want to retrieve (based on certain columns)."),(0,o.kt)("p",null,"It can be a bit cumbersome to write the object by hand, we advise you to use the DSL to create our own filters and\nsorts."),(0,o.kt)("p",null,"To start using the DSL you need the following import:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.notion.dsl._\n")),(0,o.kt)("h3",{id:"column"},"Column"),(0,o.kt)("p",null,"Both filter and sorts can be applied to databases columns (ie: what's underneath a database property)."),(0,o.kt)("p",null,"You can declare a column using ",(0,o.kt)("inlineCode",{parentName:"p"},"$")," as such:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val col: Column = $"My property"\n')),(0,o.kt)("h3",{id:"sorts"},"Sorts"),(0,o.kt)("p",null,"Sorts can be defined using a column:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val sorts: Sorts = $"Col1"\n')),(0,o.kt)("p",null,"It  means that we want the pages sorted using the ",(0,o.kt)("strong",{parentName:"p"},"Col1")," property in ascending order."),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"col.descending")," to sort them in descending order:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val sorts: Sorts = $"Col1".descending\n')),(0,o.kt)("p",null,"Sorts can be chained using the ",(0,o.kt)("inlineCode",{parentName:"p"},"andThen")," keyword:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val sorts: Sorts = $"Col1" andThen byCreatedTime.descending\n')),(0,o.kt)("h3",{id:"filters"},"Filters"),(0,o.kt)("p",null,"Filters can also be defined from a column."),(0,o.kt)("p",null,"Filters are chained using the ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"and")," keywords:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val filter = $"Col1".asNumber >= 10 and $"Col2".asDate <= LocalDate.of(2022, 2, 2)\n')),(0,o.kt)("p",null,"In order to apply a filter to a column you must first specify its property type as such:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asNumber')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asTitle')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asRichText')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asCheckbox')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asSelect')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asMultiSelect')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asDate')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asPeople')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asFiles')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asUrl')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asEmail')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asPhoneNumber')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asRelation')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asCreatedBy')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asLastEditedBy')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asCreatedTime')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'$"myprop".asLastEditedTime'))),(0,o.kt)("p",null,"All filter conditions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://developers.notion.com/reference/post-database-query-filter"},"here")," or using\nautocompletion tools."),(0,o.kt)("p",null,"For more information, you can check the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.notion.com/reference/post-database-query"},"Notion documentation"),"."),(0,o.kt)("h2",{id:"update-a-database"},"Update a database"),(0,o.kt)("p",null,"Notion allows you to update:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The database title"),(0,o.kt)("li",{parentName:"ul"},"The properties schema of the database")),(0,o.kt)("p",null,"Strictly speaking, you have to provide a list of operations describing the list of changes from the current database to\nthe expected one."),(0,o.kt)("p",null,"There is two types of operations :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Stateless operations are operations that does not require the current state of the database to generate a patch. As an\nexample, ",(0,o.kt)("inlineCode",{parentName:"li"},"setDatabaseTitle")," is a stateless operation because we don't need to explicitly know if the database already\nhas a title or not."),(0,o.kt)("li",{parentName:"ul"},"Stateful operations are operations that does require the current state of the database. As an example,\n",(0,o.kt)("inlineCode",{parentName:"li"},"renameDatabase")," requires the current database name to update it.")),(0,o.kt)("p",null,"We explicitly differentiate the operations because stateless operations does not require a database to work. It means\nthat we don't have to retrieve the database first to update it. That is why the ",(0,o.kt)("strong",{parentName:"p"},"Notion")," interface provides several\nupdate methods :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def updateDatabase(databaseId: String, operations: Database.Patch.StatelessOperations): IO[NotionError, Database]\ndef updateDatabase(database: Database, operations: Database.Patch.Operations): IO[NotionError, Database]\ndef updateDatabase(databaseId: String, operation: Database.Patch.Operations.Operation.Stateless): IO[NotionError, Database]\ndef updateDatabase(database: Database, operation: Database.Patch.Operations.Operation): IO[NotionError, Database]\n")),(0,o.kt)("p",null,"We provide several kind of operations that can compose:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.notion.dsl._ // We advise you to import the dsl\n\nval operations = $$"col1".remove ++ $$"col2".patch.as(euro)\n')),(0,o.kt)("p",null,"Here is a non-exhaustive list of operation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val operation = setDatabaseTitle("Database title") // Set the database title (Stateless)\nval operation = $$"col1".remove                    // Remove the col1 if it exists (Stateless)\nval operation = $$"col1".create(euro)              // Create a new col1 with a number type in euro (Stateless)\nval operation = $$"col1".patch.rename("col2")      // Rename the col1 to col2 (Stateful)\n')),(0,o.kt)("p",null,"For more information, you can check the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.notion.com/reference/update-a-database"},"Notion documentation"),"."))}m.isMDXComponent=!0}}]);